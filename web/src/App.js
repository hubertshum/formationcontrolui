import React from 'react';
import Header from './Header.js'
import Footer from './Footer.js'
import PlotlyFig from './Visualisation.js'
import 'bootstrap/dist/css/bootstrap.css';
import './App.css';

function query_builder(url, params) {
  // function to build query strings for hashmap
  let query = Object.keys(params)
             .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))
             .join('&');

  let qUrl = url + '?' + query;
  return qUrl
}

function Instructions() {
  return (
    <div className="p-top">
      <h3>Simulation Controls</h3>
      <ul className="list">
        <li><strong>Target X, Target Y, Target Z</strong> - The x, y, z centre of the yellow sphere.</li>
        <li><strong>Target Radius</strong> - Radius of the yellow sphere.</li>
        <li><strong>Formation X, Formation Y, Formation Z</strong> - The x, y, z position of the formation shown by the coloured dots.</li>
        <li><strong>Formation Scale</strong> - Controls the size of formation.</li>
        <li><strong>Run</strong> - Click to run a new simulation</li>
      </ul>
    </div>
  );
}

class Slider extends React.Component {
    constructor(props) {
        super(props);
        this.state = { value: 0};
    }
    
      render() {
        return (
            <div>
            <label className="form-label">{this.props.name}: {this.props.value}</label>
            <input step="1"
                value={this.props.value}
                min={this.props.min}
                max={this.props.max}
                type="range"
                className="form-range blue-dial"
                onChange={(e) => this.props.onChange(e)} />
            </div>
        );
    }
}

class UpdateButton extends React.Component {

  render () {
      //let msg = this.props.loading ? 'Running...': 'Run'
      return (
      <div className="p-bottom p-top">
        <button type="button"
                className="jh-btn-primary btn btn-primary"
                onClick={(e) => this.props.onClick(e)}>{this.props.loading}</button>
      </div>
      );
  }
}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
        // default values for the sliders
        values: [10, -20, 20, 5, 0, 0, 0, 5],
        // min values for the sliders
        min: [-50, -50, -50, 1, 0, 0, 0, 5],
        // max values for the sliders
        max: [50, 50, 50, 20, 50, 50, 50, 10],
        // names for the sliders
        names: ['Target X',
                'Target Y',
                'Target Z',
                'Target Radius',
                'Formation X',
                'Formation Y',
                'Formation Z',
                'Formation Scale'],
        // the data for the uav trajectories
        trajectoryData: null,
        // message for whether we are loading trajectory data
        loading: ''
    };
  }

  handleChange(i, e) {
    // handle slider change event
    const values = this.state.values.slice();
    values[i] = parseInt(e.target.value, 10);
    this.setState({values: values});
    e.target.blur()
  }

  handleButtonClick(e){
    // handle the button click event
    this.fetchTrajectoryData()
    e.target.blur()
  }

  figureLoaded() {
    // run when Plotly digure has been updated.
    this.setState({loading: 'Run'})
  }

  fetchTrajectoryData() {
    // ajax request for trajectory data
    this.setState({loading: 'Loading...'})
    
    let params = {
      'target': this.state.values.slice(0, 3),
      'formation': this.state.values.slice(4, 7),
      'r': this.state.values.slice(3, 4),
      'sep': this.state.values.slice(7)
    };

    let url = query_builder('/api/xt', params)

    fetch(url)
    .then(response => response.json())
    .then(this.setState({
      target: params['target'],
      r: params['r']
    }))
    .then(data => this.setState({trajectoryData: data['trajectory']}));
  }

  renderRange(i) {
    // helper function to render the slider
    return <Slider
            name={this.state.names[i]}
            value={this.state.values[i]}
            onChange={(e) => this.handleChange(i, e)}
            min={this.state.min[i]}
            max={this.state.max[i]}/>;
  }

  componentDidMount() {
    // after render then load some data for the user.
    this.fetchTrajectoryData()
  }

  render() {
    return (
      <div className="App">
        <Header/>
      <div className="container space-up-down">
          <p>The formation plans its trajectory intelligently by measuring the sum or flux of an electric field across its surface which is generated by the target. By increasing the flux the formation can locate and move toward the target. Collisions are avoided since a reduction in the surface area of the formation reduces the flux.</p>
              <div className="row">
                  <div className="col-sm-2">
                      {this.renderRange(0)}         
                      {this.renderRange(1)}         
                      {this.renderRange(2)}         
                      {this.renderRange(3)}         
                      {this.renderRange(4)}         
                      {this.renderRange(5)}         
                      {this.renderRange(6)}         
                      {this.renderRange(7)}
                      <UpdateButton onClick={(e) => this.handleButtonClick(e)} loading={this.state.loading}/>
                  </div>
                  <div className="col-sm-10">
                      <PlotlyFig onChange={() => this.figureLoaded()} tdata={this.state.trajectoryData} target={this.state.target} r={this.state.r}/>
                  </div>
              </div>

              <Instructions />
      </div>
      <Footer/>
      </div>
    );
  }
}

export default App;
